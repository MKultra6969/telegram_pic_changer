import logging
import os
import time
import json
from pyrogram import Client, filters
from datetime import timedelta
from datetime import datetime
from config import API_ID, API_HASH, BOT_TOKEN, ADMIN_ID, SAVE_DIR, LOG_DIR, LOG_FILENAME, BOT_SESSION_NAME, USER_SESSION_NAME

BAN_LIST_FILE = "ban_list.json"

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,  # –£—Ä–æ–≤–µ–Ω—å INFO –¥–ª—è –≤–∞–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    format="%(asctime)s - %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILENAME),  # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
        logging.StreamHandler()  # –¢–∞–∫–∂–µ –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Pyrogram
logging.getLogger("pyrogram").setLevel(logging.WARNING)  # –¢–æ–ª—å–∫–æ WARNING –∏ –≤—ã—à–µ –¥–ª—è Pyrogram


def load_ban_list():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists(BAN_LIST_FILE):
        try:
            with open(BAN_LIST_FILE, "r", encoding="utf-8") as file:
                banned_users = set(json.load(file))
                logging.info(f"–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ {len(banned_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
                return banned_users
        except json.JSONDecodeError:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
            return set()
        except Exception as e:
            logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return set()
    else:
        logging.info(f"–§–∞–π–ª {BAN_LIST_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö.")
        return set()


def save_ban_list():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª."""
    try:
        with open(BAN_LIST_FILE, "w", encoding="utf-8") as file:
            json.dump(list(banned_users), file, ensure_ascii=False, indent=4)
            logging.info("–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")


# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
banned_users = load_ban_list()

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–æ–∫, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(SAVE_DIR, exist_ok=True)

# bot client
bot = Client(BOT_SESSION_NAME, api_id=API_ID, api_hash=API_HASH, bot_token=BOT_TOKEN)

# user client
user_client = Client(USER_SESSION_NAME, api_id=API_ID, api_hash=API_HASH)

# –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–π–º-–∞—É—Ç–∞—Ö –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞—Ö
user_timeouts = {}
global_timeout = None  # –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º-–∞—É—Ç
spam_blocked = False
banned_users = set()  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π


def get_next_filename():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–∞–π–ª–∞ —Å –∞–≤–∞—Ç–∞—Ä–∫–æ–π."""
    existing_files = os.listdir(SAVE_DIR)
    nums = [
        int(f.replace("pic", "").replace(".jpg", ""))
        for f in existing_files if f.startswith("pic") and f.endswith(".jpg")
    ]
    next_num = max(nums, default=0) + 1
    return os.path.join(SAVE_DIR, f"pic{next_num}.jpg")


def parse_timeout(timeout_str):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å —Ç–∞–π–º-–∞—É—Ç–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç timedelta."""
    if timeout_str.endswith('s'):
        return timedelta(seconds=int(timeout_str[:-1]))  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ–∫—É–Ω–¥
    elif timeout_str.endswith('m'):
        return timedelta(minutes=int(timeout_str[:-1]))
    elif timeout_str.endswith('h'):
        return timedelta(hours=int(timeout_str[:-1]))
    elif timeout_str.endswith('d'):
        return timedelta(days=int(timeout_str[:-1]))
    return None


@bot.on_message(filters.private & filters.photo)
async def handle_photo(client, message):
    user_id = message.from_user.id
    username = message.from_user.username or "–±–µ–∑ –∏–º–µ–Ω–∏"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –¥–æ—Å—Ç—É–ø
    if spam_blocked:
        await message.reply("–î–æ—Å—Ç—É–ø –Ω–∞ —Å–º–µ–Ω—É –∞–≤–∞—Ç–∞—Ä–∫–∏ –∑–∞–∫—Ä—ã—Ç, –∏–¥–∏ –Ω–∞—Ö—É–π.")
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–º–µ–Ω—ã –∞–≤–∞—Ç–∞—Ä–∫–∏ –æ—Ç @{username} (ID: {user_id}), –¥–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω
    if user_id in banned_users:
        await message.reply("–¢–´ –ó–ê–ë–ê–ù–ï–ù, –£–ï–ë–ò–©–ï")
        logging.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–º–µ–Ω—ã –∞–≤–∞—Ç–∞—Ä–∫–∏ –æ—Ç @{username} (ID: {user_id}), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º-–∞—É—Ç –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_time = time.time()
    last_time = user_timeouts.get(user_id, 0)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ç–∞–π–º-–∞—É—Ç
    if global_timeout and (current_time - last_time) < global_timeout.total_seconds():
        wait_time = global_timeout.total_seconds() - (current_time - last_time)
        await message.reply(f"–ñ–¥–∏ {int(wait_time // 60)} –º–∏–Ω—É—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–º–µ–Ω—ã –∞–≤–∞—Ç–∞—Ä–∫–∏.")
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Å–º–µ–Ω—ã –∞–≤–∞—Ç–∞—Ä–∫–∏ –æ—Ç @{username} (ID: {user_id}), —Ç–∞–π–º-–∞—É—Ç –Ω–µ –ø—Ä–æ—à–µ–ª.")
        return

    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
    file_path = get_next_filename()
    await bot.download_media(message.photo.file_id, file_name=file_path)
    logging.info(f"–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")

    # –ú–µ–Ω—è–µ–º –∞–≤–∞—Ç–∞—Ä–∫—É
    try:
        await user_client.set_profile_photo(photo=file_path)
        user_timeouts[user_id] = current_time  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        await message.reply("–ì–û–¢–û–í–û, –ü–†–û–í–ï–†–Ø–ô")
        logging.info(f"–ê–≤–∞—Ç–∞—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è @{username} (ID: {user_id})")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –¥–ª—è @{username} (ID: {user_id}): {e}")
        await message.reply(f"–¢–´ –î–û–õ–ë–ê–ï–ë? –ù–ò–ß–ï –ù–ï –ü–û–õ–£–ß–ò–¢–°–Ø, –ü–û–ö–ê. {e}")


@bot.on_message(filters.command("start"))
async def start_message(client, message):
    welcome_text = (
        "–û–¢–ü–†–ê–í–¨ –ú–ù–ï –õ–Æ–ë–£–Æ –ï–ë–ê–ù–£–Æ –§–û–¢–ö–£, –ò –Ø –°–ú–ï–ù–Æ –ï–ï –í –ü–†–û–§–ò–õ–ï @mkultra6969.\n\n"
        "–ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è ‚Äî –¢–û –í–ò–ù–û–í–ê–¢ –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –Æ–ó–ï–† –ù–û –ù–ï –†–ê–ó–†–ê–ë.üòãüòãüòã"
    )
    await message.reply(welcome_text)
    username = message.from_user.username or "–±–µ–∑ –∏–º–µ–Ω–∏"
    logging.info(f"–Æ–∑–µ—Ä –Ω–∞–∂–∞–ª START –≤ –±–æ—Ç–µ @{username} id: {message.from_user.id}")


@bot.on_message(filters.command("timeout"))
async def set_timeout(client, message):
    global global_timeout
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ö—É–¥–∞ —Ç—ã –ª–µ–∑–∏—à—å —á—é—á–µ–ª–æ –µ–±–∞–Ω–æ–µ.")
        return

    parts = message.text.split()
    if len(parts) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /timeout <–≤—Ä–µ–º—è>, –Ω–∞–ø—Ä–∏–º–µ—Ä /timeout 1h.")
        return

    timeout_str = parts[1]
    timeout = parse_timeout(timeout_str)
    if timeout:
        global_timeout = timeout
        await message.reply(f"–¢–∞–π–º-–∞—É—Ç –¥–ª—è —Å–º–µ–Ω—ã –∞–≤–∞—Ç–∞—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {timeout_str}.")
        logging.info(f"–¢–∞–π–º-–∞—É—Ç –¥–ª—è —Å–º–µ–Ω—ã –∞–≤–∞—Ç–∞—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {timeout_str}.")
    else:
        await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π s (—Å–µ–∫—É–Ω–¥—ã), m (–º–∏–Ω—É—Ç—ã), h (—á–∞—Å—ã), d (–¥–Ω–∏).")


@bot.on_message(filters.command("timeout_user"))
async def set_user_timeout(client, message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ü–û–®–ï–õ –ù–ê–•–£–ô, –ì–õ–ê–í–ù–´–ô –¢–£–¢ MKultra.")
        return

    parts = message.text.split()
    if len(parts) < 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /timeout_user @username 1h –∏–ª–∏ /timeout_user <id> 1h.")
        return

    username_or_id = parts[1]
    timeout_str = parts[2]
    timeout = parse_timeout(timeout_str)

    if timeout:
        if username_or_id.startswith('@'):
            username = username_or_id[1:]
            user_id = await get_user_id_by_username(username)
            if user_id:
                user_timeouts[user_id] = time.time()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                await message.reply(f"–¢–∞–π–º-–∞—É—Ç –¥–ª—è @{username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {timeout_str}.")
                logging.info(f"–¢–∞–π–º-–∞—É—Ç –¥–ª—è @{username} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {timeout_str}.")
            else:
                await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}.")
        else:
            try:
                user_id = int(username_or_id)
                user_timeouts[user_id] = time.time()  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                await message.reply(f"–¢–∞–π–º-–∞—É—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {timeout_str}.")
                logging.info(f"–¢–∞–π–º-–∞—É—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {timeout_str}.")
            except ValueError:
                await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    else:
        await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.")


@bot.on_message(filters.command("stop_spam"))
async def stop_spam(client, message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ü–û–®–ï–õ –ù–ê–•–£–ô, –ì–õ–ê–í–ù–´–ô –¢–£–¢ MKultra.")
        return

    global spam_blocked
    spam_blocked = True
    await message.reply("–°–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ç–µ–ø–µ—Ä—å –Ω–µ–ª—å–∑—è.")
    logging.info("–î–æ—Å—Ç—É–ø –Ω–∞ —Å–º–µ–Ω—É –∞–≤–∞—Ç–∞—Ä–∫–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –¥–ª—è –≤—Å–µ—Ö.")


@bot.on_message(filters.command("start_spam"))
async def start_spam(client, message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ü–û–®–ï–õ –ù–ê–•–£–ô, –ì–õ–ê–í–ù–´–ô –¢–£–¢ MKultra.")
        return

    global spam_blocked
    spam_blocked = False
    await message.reply("–°–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä–∫—É —Å–Ω–æ–≤–∞ –º–æ–∂–Ω–æ.")
    logging.info("–î–æ—Å—Ç—É–ø –Ω–∞ —Å–º–µ–Ω—É –∞–≤–∞—Ç–∞—Ä–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


@bot.on_message(filters.command("ban_user"))
async def ban_user(client, message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ü–û–®–ï–õ –ù–ê–•–£–ô, –ì–õ–ê–í–ù–´–ô –¢–£–¢ MKultra.")
        return

    parts = message.text.split()
    if len(parts) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /ban_user @username –∏–ª–∏ /ban_user <id>.")
        return

    username_or_id = parts[1]
    if username_or_id.startswith('@'):
        username = username_or_id[1:]
        user_id = await get_user_id_by_username(username)
        if user_id:
            if user_id in banned_users:
                await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω.")
                logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–±–∞–Ω–∏—Ç—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}.")
            else:
                banned_users.add(user_id)
                save_ban_list()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–∞–Ω–µ–Ω.")
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –∑–∞–±–∞–Ω–µ–Ω.")
        else:
            await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}.")
    else:
        try:
            user_id = int(username_or_id)
            if user_id in banned_users:
                await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω.")
                logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–±–∞–Ω–∏—Ç—å —É–∂–µ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            else:
                banned_users.add(user_id)
                save_ban_list()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω.")
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω.")
        except ValueError:
            await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


@bot.on_message(filters.command("unban_user"))
async def unban_user(client, message):
    if message.from_user.id != ADMIN_ID:
        await message.reply("–ü–û–®–ï–õ –ù–ê–•–£–ô, –ì–õ–ê–í–ù–´–ô –¢–£–¢ MKultra.")
        return

    parts = message.text.split()
    if len(parts) < 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /unban_user @username –∏–ª–∏ /unban_user <id>.")
        return

    username_or_id = parts[1]
    if username_or_id.startswith('@'):
        username = username_or_id[1:]
        user_id = await get_user_id_by_username(username)
        if user_id:
            if user_id in banned_users:
                banned_users.remove(user_id)
                save_ban_list()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            else:
                await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.")
                logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–±–∞–Ω–∏—Ç—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}.")
        else:
            await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}.")
    else:
        try:
            user_id = int(username_or_id)
            if user_id in banned_users:
                banned_users.remove(user_id)
                save_ban_list()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            else:
                await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.")
                logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–±–∞–Ω–∏—Ç—å –Ω–µ –∑–∞–±–∞–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
        except ValueError:
            await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")


async def get_user_id_by_username(username):
    try:
        user = await bot.get_users(username)
        return user.id
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
        return None


if __name__ == "__main__":
    try:
        logging.info("–ó–∞–ø—É—Å–∫ user –∫–ª–∏–µ–Ω—Ç–∞...")
        user_client.start()
        logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot.run()
    except Exception as e:
        logging.critical(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        user_client.stop()
        logging.info("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# Sanya ti pedic
# Made by MKultra69
# GFY